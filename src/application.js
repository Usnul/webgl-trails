// Generated by CoffeeScript 1.3.3
var Cube, Sphere, Texture2D, Trail, angle, camera, loading, schedule,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

schedule = require('schedule');

loading = require('loading');

camera = require('camera');

Cube = require('webgl/cube');

Sphere = require('webgl/sphere');

Texture2D = require('webgl/texture').Texture2D;

window.convert = function(s) {
  var b, g, r;
  r = eval('0x' + s.slice(0, 2)) / 255.0;
  g = eval('0x' + s.slice(2, 4)) / 255.0;
  b = eval('0x' + s.slice(4, 6)) / 255.0;
  return console.log("vec3(" + r + "," + g + "," + b + ")");
};

$('*').each(function() {
  $(this).attr('unselectable', 'on').css({
    '-moz-user-select': 'none',
    '-webkit-user-select': 'none',
    'user-select': 'none',
    '-ms-user-select': 'none'
  });
  return this.onselectstart = function() {
    return false;
  };
});

angle = function(x1, y1, z1, x2, y2, z2) {
  return (Math.acos(x1 * x2 + y1 * y2 + z1 * z2) * 360) / (Math.PI * 2);
};

Trail = (function(_super) {

  __extends(Trail, _super);

  Trail.prototype.attribs = ['position'];

  function Trail(gl) {
    var a, b, bc, c, d, i, j, l, lnx, lny, lnz, lx, ly, lz, nx, ny, nz, result, x, y, z, _i;
    this.gl = gl;
    Trail.__super__.constructor.call(this);
    this.mode = this.gl.TRIANGLE_STRIP;
    result = [];
    lx = 0;
    ly = 0;
    lz = 0;
    lnx = 1;
    lny = 0;
    lnz = 0;
    d = 0;
    bc = [1, 0, 0];
    for (j = _i = 0; _i < 10000; j = ++_i) {
      i = j * 0.1;
      a = i + 3;
      b = i + 7;
      c = i + 11;
      x = Math.sin(a / 5) + Math.sin(a / 23) + Math.sin(a / 53);
      y = Math.sin(b / 7) + Math.sin(b / 29) + Math.sin(b / 67);
      z = Math.sin(b / 11) + Math.sin(b / 31) + Math.sin(b / 73);
      nx = x - lx;
      ny = y - ly;
      nz = z - lz;
      l = Math.sqrt(Math.pow(nx, 2) + Math.pow(ny, 2) + Math.pow(nz, 2));
      nx /= l;
      ny /= l;
      nz /= l;
      if (l > 1.5 || angle(nx, ny, nz, lnx, lny, lnz) > 8) {
        d += l;
        result.push(x, y, z, 1, d, bc[0], bc[1], bc[2]);
        bc.push(bc.splice(0, 1)[0]);
        result.push(x, y, z, -1, d, bc[0], bc[1], bc[2]);
        bc.push(bc.splice(0, 1)[0]);
        lnx = nx;
        lny = ny;
        lnz = nz;
        lx = x;
        ly = y;
        lz = z;
      }
    }
    this.components = 8;
    this.size = (result.length / this.components) - 4;
    this.uploadList(result);
  }

  Trail.prototype.setPointersForShader = function(shader) {
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
    this.setPointer(shader, 'last', 4, 0, this.components);
    this.setPointer(shader, 'current', 4, this.components * 2, this.components);
    this.setPointer(shader, 'texoff', 1, this.components * 2 + 4, this.components);
    this.setPointer(shader, 'barycentric', 3, this.components * 2 + 5, this.components);
    this.setPointer(shader, 'next', 4, this.components * 4, this.components);
    return this;
  };

  return Trail;

})(require('webgl/drawable'));

exports.Application = (function() {

  function _Class(canvas) {
    var container, input,
      _this = this;
    this.canvas = canvas;
    this.update = __bind(this.update, this);

    this.resize = __bind(this.resize, this);

    loading.hide();
    this.camera = new camera.Orbit({
      near: 0.001,
      far: 100,
      dist: 5
    });
    this.sky = get('sky.shader');
    this.textured = get('textured.shader');
    this.wireframe = get('wireframe.shader');
    this.texture = new Texture2D(gl).bind().upload(get('smoke.png')).mipmap().repeat();
    this.display = this.textured;
    this.sphere = new Sphere(gl);
    this.geom = new Trail(gl);
    $(window).resize(this.resize);
    this.resize();
    schedule.run(this.update);
    gl.enable(gl.CULL_FACE);
    this.canvas.fadeIn(2000);
    container = $('<div></div>').css('margin', 10).appendTo('#ui');
    $('<span>Wireframe</span>').appendTo(container);
    input = $('<input type="checkbox">').appendTo(container).change(function() {
      if (input[0].checked) {
        return _this.display = _this.wireframe;
      } else {
        return _this.display = _this.textured;
      }
    });
  }

  _Class.prototype.resize = function() {
    this.width = this.canvas.width();
    this.height = this.canvas.height();
    this.canvas[0].width = this.width;
    this.canvas[0].height = this.height;
    gl.viewport(0, 0, this.width, this.height);
    return this.camera.aspect(this.width, this.height);
  };

  _Class.prototype.update = function() {
    this.step();
    return this.draw();
  };

  _Class.prototype.step = function() {
    return this.camera.update();
  };

  _Class.prototype.draw = function() {
    gl.cullFace(gl.FRONT);
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    gl.disable(gl.BLEND);
    gl.depthMask(false);
    this.sky.use().mat4('proj', this.camera.proj).mat3('rot', this.camera.rot).draw(this.sphere);
    gl.cullFace(gl.BACK);
    gl.enable(gl.DEPTH_TEST);
    gl.depthMask(true);
    gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    this.texture.bind(0);
    return this.display.use().i('smoke', 0).f('width', 0.13).val2('viewport', this.width, this.height).mat4('proj', this.camera.proj).mat4('view', this.camera.view).draw(this.geom);
  };

  return _Class;

})();
