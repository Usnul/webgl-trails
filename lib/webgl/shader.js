// Generated by CoffeeScript 1.3.3
var Shader, current;

current = null;

return Shader = (function() {

  function Shader(gl, source) {
    this.gl = gl;
    this.program = this.gl.createProgram();
    this.vs = this.gl.createShader(gl.VERTEX_SHADER);
    this.fs = this.gl.createShader(gl.FRAGMENT_SHADER);
    this.gl.attachShader(this.program, this.vs);
    this.gl.attachShader(this.program, this.fs);
    this.link(source);
  }

  Shader.prototype.preprocess = function(source) {
    var directives, i, line, lines, match, shaders, type, _i, _len;
    lines = source.split('\n');
    shaders = {
      'global': '',
      'fragment': '',
      'vertex': ''
    };
    type = 'global';
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      line = lines[i];
      match = line.match(/^(\w+):$/);
      if (match) {
        type = match[1];
      } else {
        shaders[type] += '#line ' + i + '\n' + line + '\n';
      }
    }
    directives = ['precision highp int;', 'precision highp float;', 'precision highp vec2;', 'precision highp vec3;', 'precision highp vec4;'].join('\n') + '\n';
    shaders.fragment = directives + shaders.global + shaders.fragment;
    shaders.vertex = directives + shaders.global + shaders.vertex;
    return shaders;
  };

  Shader.prototype.link = function(source) {
    var shaders;
    shaders = this.preprocess(source);
    this.compile(this.vs, shaders.vertex);
    this.compile(this.fs, shaders.fragment);
    this.gl.linkProgram(this.program);
    if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {
      throw "Shader Link Error: " + (this.gl.getProgramInfoLog(this.program));
    }
    this.attrib_cache = {};
    return this.uniform_cache = {};
  };

  Shader.prototype.compile = function(shader, source) {
    this.gl.shaderSource(shader, source);
    this.gl.compileShader(shader);
    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
      throw "Shader Compile Error: " + (this.gl.getShaderInfoLog(shader));
    }
  };

  Shader.prototype.attribLoc = function(name) {
    var location;
    location = this.attrib_cache[name];
    if (location === void 0) {
      location = this.attrib_cache[name] = this.gl.getAttribLocation(this.program, name);
    }
    if (location >= 0) {
      this.gl.enableVertexAttribArray(location);
    }
    return location;
  };

  Shader.prototype.use = function() {
    this.gl.useProgram(this.program);
    return this;
  };

  Shader.prototype.loc = function(name) {
    var location;
    location = this.uniform_cache[name];
    if (location === void 0) {
      location = this.uniform_cache[name] = this.gl.getUniformLocation(this.program, name);
    }
    return location;
  };

  Shader.prototype.i = function(name, value) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniform1i(loc, value);
    }
    return this;
  };

  Shader.prototype.f = function(name, value) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniform1f(loc, value);
    }
    return this;
  };

  Shader.prototype.val2 = function(name, a, b) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniform2f(loc, a, b);
    }
    return this;
  };

  Shader.prototype.val3 = function(name, a, b, c) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniform3f(loc, a, b, c);
    }
    return this;
  };

  Shader.prototype.vec3 = function(name, value) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniform3fv(loc, value);
    }
    return this;
  };

  Shader.prototype.val4 = function(name, a, b, c, d) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniform4f(loc, a, b, c, d);
    }
    return this;
  };

  Shader.prototype.vec4 = function(name, a, b, c, e) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniform2f(loc, a, b, c, e);
    }
    return this;
  };

  Shader.prototype.mat4 = function(name, value) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      if (value instanceof Mat4) {
        this.gl.uniformMatrix4fv(loc, this.gl.FALSE, value.data);
      } else {
        this.gl.uniformMatrix4fv(loc, this.gl.FALSE, value);
      }
    }
    return this;
  };

  Shader.prototype.mat3 = function(name, value) {
    var loc;
    loc = this.loc(name);
    if (loc) {
      this.gl.uniformMatrix3fv(loc, this.gl.FALSE, value.data);
    }
    return this;
  };

  Shader.prototype.draw = function(drawable) {
    drawable.setPointersForShader(this).draw().disableAttribs(this);
    return this;
  };

  return Shader;

})();
